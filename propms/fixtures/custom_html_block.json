[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"crm-dashboard\" class=\"crm-dashboard\">\n    <!-- Client Info Section -->\n    <div class=\"client-info\">\n        <h2>Client Profile</h2>\n        <div id=\"client-card\" class=\"client-card\">\n            <img src=\"https://via.placeholder.com/150\" alt=\"Client Avatar\" class=\"client-avatar\">\n            <div class=\"client-details\">\n                <h3 id=\"client-name\">John Doe</h3>\n                <p><strong>Email:</strong> <span id=\"client-email\">john.doe@example.com</span></p>\n                <p><strong>Phone:</strong> <span id=\"client-phone\">+1 234 567 890</span></p>\n                <button id=\"edit-client\" class=\"edit-button\">Edit Info</button>\n            </div>\n        </div>\n    </div>\n\n    <!-- Task Management Section -->\n    <div class=\"task-management\">\n        <h2>Task Tracker</h2>\n        <div id=\"task-list\">\n            <ul>\n                <!-- Tasks will be dynamically added here -->\n            </ul>\n        </div>\n        <button id=\"add-task\" class=\"add-task-button\">Add Task</button>\n    </div>\n\n    <!-- Notes Section -->\n    <div class=\"notes-section\">\n        <h2>Quick Notes</h2>\n        <textarea id=\"note-input\" placeholder=\"Write a quick note...\"></textarea>\n        <button id=\"save-note\" class=\"save-note-button\">Save Note</button>\n        <div id=\"notes-list\">\n            <!-- Notes will appear here -->\n        </div>\n    </div>\n</div>\n\n<!-- Modal for Task Creation -->\n<div id=\"task-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n        <h3>Create New Task</h3>\n        <label for=\"task-name\">Task Name</label>\n        <input type=\"text\" id=\"task-name\" placeholder=\"Task name\">\n        <label for=\"task-deadline\">Deadline</label>\n        <input type=\"date\" id=\"task-deadline\">\n        <label for=\"task-priority\">Priority</label>\n        <select id=\"task-priority\">\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n        </select>\n        <label for=\"task-status\">Status</label>\n        <select id=\"task-status\">\n            <option value=\"pending\">Pending</option>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"completed\">Completed</option>\n        </select>\n        <button id=\"save-task\" class=\"save-task-button\">Save Task</button>\n        <button id=\"close-modal\" class=\"close-modal-button\">Close</button>\n    </div>\n</div>",
  "modified": "2024-12-27 18:06:47.035851",
  "name": "Test",
  "private": 0,
  "roles": [],
  "script": "// DOM elements\nconst taskModal = document.getElementById('task-modal');\nconst addTaskButton = document.getElementById('add-task');\nconst closeModalButton = document.getElementById('close-modal');\nconst saveTaskButton = document.getElementById('save-task');\nconst taskList = document.querySelector('#task-list ul');\nconst saveNoteButton = document.getElementById('save-note');\nconst noteInput = document.getElementById('note-input');\nconst notesList = document.getElementById('notes-list');\nconst editClientButton = document.getElementById('edit-client');\n\n// Show modal when clicking on 'Add Task'\naddTaskButton.addEventListener('click', () => {\n    taskModal.style.display = 'flex';\n});\n\n// Close modal\ncloseModalButton.addEventListener('click', () => {\n    taskModal.style.display = 'none';\n});\n\n// Save task\nsaveTaskButton.addEventListener('click', () => {\n    const taskName = document.getElementById('task-name').value;\n    const taskDeadline = document.getElementById('task-deadline').value;\n    const taskPriority = document.getElementById('task-priority').value;\n    const taskStatus = document.getElementById('task-status').value;\n\n    // Validate that task name is not empty\n    if (!taskName.trim()) {\n        alert('Please enter a task name.');\n        return;\n    }\n\n    const newTask = document.createElement('li');\n    newTask.innerHTML = \n        <span>${taskName} - ${taskDeadline} - <strong>${taskPriority}</strong></span>\n        <span class=\"task-status ${taskStatus}\">${taskStatus.charAt(0).toUpperCase() + taskStatus.slice(1)}</span>\n        <button class=\"task-remove-btn\">Remove</button>\n    ;\n    taskList.appendChild(newTask);\n\n    // Reset the form and close modal\n    document.getElementById('task-name').value = '';\n    document.getElementById('task-deadline').value = '';\n    document.getElementById('task-priority').value = 'low';\n    document.getElementById('task-status').value = 'pending';\n    taskModal.style.display = 'none';\n});\n\n// Remove task\ntaskList.addEventListener('click', (event) => {\n    if (event.target.classList.contains('task-remove-btn')) {\n        event.target.parentElement.remove();\n    }\n});\n\n// Save note functionality (localStorage or backend integration could be added)\nsaveNoteButton.addEventListener('click', () => {\n    const note = noteInput.value;\n    if (note.trim()) {\n        // Create a new note element\n        const noteElement = document.createElement('div');\n        noteElement.classList.add('note-item');\n        noteElement.innerHTML = \n            <p>${note}</p>\n            <button class=\"edit-note-btn\">Edit</button>\n            <button class=\"delete-note-btn\">Delete</button>\n        ;\n        notesList.appendChild(noteElement);\n\n        // Clear input\n        noteInput.value = '';\n    } else {\n        alert('Please enter a note.');\n    }\n});\n\n// Edit note functionality (you can add a better editing functionality)\nnotesList.addEventListener('click', (event) => {\n    if (event.target.classList.contains('edit-note-btn')) {\n        const noteItem = event.target.parentElement;\n        const noteText = noteItem.querySelector('p').textContent;\n        const newNoteText = prompt('Edit your note:', noteText);\n        if (newNoteText !== null && newNoteText.trim()) {\n            noteItem.querySelector('p').textContent = newNoteText;\n        }\n    }\n});\n\n// Delete note functionality\nnotesList.addEventListener('click', (event) => {\n    if (event.target.classList.contains('delete-note-btn')) {\n        event.target.parentElement.remove();\n    }\n});\n\n// Edit client button (example behavior)\neditClientButton.addEventListener('click', () => {\n    alert('Edit Client Info functionality will be implemented!');\n});",
  "style": " /* Basic Styling, same as before, with minor tweaks */\n    .crm-dashboard {\n        display: flex;\n        gap: 2rem;\n        padding: 20px;\n    }\n\n    .client-info, .task-management, .notes-section {\n        flex: 1;\n        background: #f9f9f9;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n\n    .client-card {\n        display: flex;\n        gap: 15px;\n    }\n\n    .client-avatar {\n        width: 80px;\n        height: 80px;\n        border-radius: 50%;\n    }\n\n    .client-details {\n        flex: 1;\n    }\n\n    .edit-button {\n        margin-top: 10px;\n        background-color: #007bff;\n        color: white;\n        border: none;\n        padding: 8px 15px;\n        cursor: pointer;\n        border-radius: 5px;\n    }\n\n    .task-management ul {\n        list-style-type: none;\n        padding: 0;\n    }\n\n    .task-management ul li {\n        background-color: #e9ecef;\n        padding: 10px;\n        border-radius: 5px;\n        margin-bottom: 10px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .task-remove-btn {\n        background-color: #dc3545;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n\n    .add-task-button {\n        background-color: #28a745;\n        color: white;\n        border: none;\n        padding: 10px 15px;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n    \n    .notes-section textarea {\n        width: 100%;\n        height: 100px;\n        margin-bottom: 10px;\n        padding: 10px;\n        border: 1px solid #ddd;\n        border-radius: 5px;\n    }\n\n    .save-note-button {\n        background-color: #ffbb33;\n        color: white;\n        border: none;\n        padding: 10px 15px;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n\n    .modal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        justify-content: center;\n        align-items: center;\n    }\n\n    .modal-content {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        width: 300px;\n        text-align: center;\n    }\n\n    .save-task-button, .close-modal-button {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        padding: 10px 15px;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n\n    /* Additional styling for status labels */\n    .task-status {\n        font-weight: bold;\n        padding: 5px 10px;\n        border-radius: 5px;\n    }\n\n    .task-status.pending {\n        background-color: #ffc107;\n        color: #fff;\n    }\n\n    .task-status.in-progress {\n        background-color: #17a2b8;\n        color: #fff;\n    }\n\n    .task-status.completed {\n        background-color: #28a745;\n        color: #fff;\n    }"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"sticky-note-block\">\n    <h3>Sticky Notes</h3>\n    <div id=\"sticky-notes-container\"></div>\n    <button id=\"add-note-button\">+ Add Note</button>\n</div>\n",
  "modified": "2024-12-28 13:35:04.534745",
  "name": "Test 2",
  "private": 0,
  "roles": [],
  "script": "// Ensure you're querying the correct parent element for sticky notes\nlet stickyNotesContainer = root_element.querySelector('#sticky-notes-container');\nlet addNoteButton = root_element.querySelector('#add-note-button');\n\n// Function to fetch sticky notes from the database\nasync function fetchStickyNotes() {\n    try {\n        const response = await fetch('/api/method/get_sticky_notes', { method: 'GET' });\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        displayStickyNotes(data.notes || []);\n    } catch (error) {\n        console.error(\"Error fetching sticky notes:\", error);\n    }\n}\n\n// Function to display sticky notes\nfunction displayStickyNotes(notes) {\n    stickyNotesContainer.innerHTML = '';\n    notes.forEach(note => createStickyNoteElement(note.id, note.content));\n}\n\n// Function to create a new sticky note\nfunction createStickyNoteElement(id, content = '') {\n    const note = document.createElement('div');\n    note.className = 'sticky-note';\n    note.dataset.id = id;\n\n    const textarea = document.createElement('textarea');\n    textarea.value = content;\n    textarea.addEventListener('input', () => saveStickyNoteContent(id, textarea.value));\n\n    const deleteButton = document.createElement('button');\n    deleteButton.textContent = 'Delete';\n    deleteButton.addEventListener('click', () => deleteStickyNote(id, note));\n\n    note.appendChild(textarea);\n    note.appendChild(deleteButton);\n    stickyNotesContainer.appendChild(note);\n}\n\n// Function to save sticky note content\nasync function saveStickyNoteContent(id, content) {\n    try {\n        await fetch('/api/method/save_sticky_note', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ id, content })\n        });\n    } catch (error) {\n        console.error(\"Error saving sticky note:\", error);\n    }\n}\n\n// Function to delete a sticky note\nasync function deleteStickyNote(id, noteElement) {\n    try {\n        await fetch(`/api/method/delete_sticky_note?id=${id}`, { method: 'DELETE' });\n        stickyNotesContainer.removeChild(noteElement);\n    } catch (error) {\n        console.error(\"Error deleting sticky note:\", error);\n    }\n}\n\n// Event listener for adding a new note\naddNoteButton.addEventListener('click', async () => {\n    try {\n        const response = await fetch('/api/method/create_sticky_note', { method: 'POST' });\n        const newNote = await response.json();\n        createStickyNoteElement(newNote.id, newNote.content);\n    } catch (error) {\n        console.error(\"Error creating a new sticky note:\", error);\n    }\n});\n\n// Initial fetch of sticky notes\nfetchStickyNotes();",
  "style": "/* Container styling */\n#sticky-note-block {\n    padding: 30px;\n    border: 1px solid #ddd;\n    border-radius: 12px;\n    width: 90%;\n    max-width: 800px;\n    margin: 30px auto;\n    background: linear-gradient(135deg, #fdfbfb, #ebedee);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n    text-align: center;\n    font-family: 'Arial', sans-serif;\n}\n\n#sticky-note-block h3 {\n    margin-bottom: 20px;\n    font-size: 24px;\n    color: #333;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n/* Add note button styling */\n#add-note-button {\n    background: linear-gradient(135deg, #6a11cb, #2575fc);\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    border-radius: 25px;\n    cursor: pointer;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n#add-note-button:hover {\n    transform: scale(1.1);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n}\n\n/* Sticky notes container */\n#sticky-notes-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 15px;\n    margin-top: 20px;\n}\n\n/* Individual sticky note card */\n.sticky-note {\n    background: linear-gradient(135deg, #ffecd2, #fcb69f);\n    border-radius: 12px;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    position: relative;\n}\n\n.sticky-note:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);\n}\n\n/* Sticky note textarea */\n.sticky-note textarea {\n    width: 100%;\n    height: 120px;\n    resize: none;\n    border: none;\n    outline: none;\n    background: none;\n    font-family: 'Arial', sans-serif;\n    font-size: 14px;\n    line-height: 1.5;\n    color: #333;\n    padding: 10px;\n    border-radius: 6px;\n    box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.05);\n}\n\n/* Delete button */\n.sticky-note button {\n    background: linear-gradient(135deg, #ff6a6a, #d73c3c);\n    color: white;\n    border: none;\n    padding: 5px 10px;\n    font-size: 12px;\n    font-weight: bold;\n    border-radius: 6px;\n    cursor: pointer;\n    transition: background 0.3s ease;\n    align-self: flex-end;\n}\n\n.sticky-note button:hover {\n    background: linear-gradient(135deg, #ff3d3d, #bf2a2a);\n}\n\n/* Floating animations */\n.sticky-note:nth-child(even) {\n    animation: float 4s ease-in-out infinite;\n}\n\n.sticky-note:nth-child(odd) {\n    animation: float 6s ease-in-out infinite;\n}\n.sticky-note {\n    background: linear-gradient(135deg, #ffecd2, #fcb69f);\n    border-radius: 12px;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    position: relative;\n    z-index: 10;  /* Ensure sticky notes are on top */\n}\n@keyframes float {\n    0%, 100% {\n        transform: translateY(0);\n    }\n    50% {\n        transform: translateY(-10px);\n    }\n}\n\n/* Responsive design for sticky notes */\n@media (max-width: 600px) {\n    #sticky-notes-container {\n        grid-template-columns: 1fr;\n    }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<nav>\n   <label for=\"touch\"><span>Setup</span></label>               \n   <input type=\"checkbox\" id=\"touch\"> \n\n   <ul class=\"slide\">\n      <li><a href=\"#property\" onclick=\"openDocType('Property')\">Property</a></li>\n      <li><a href=\"#unit\" onclick=\"openDocType('Unit')\">Unit</a></li>\n      <li><a href=\"#reservation-form\" onclick=\"openDocType('Reservation form')\">Reservation Form</a></li>\n      <li><a href=\"#unit-type\" onclick=\"openDocType('Unit Type')\">Unit Type</a></li>\n      \n   </ul>\n</nav> ",
  "modified": "2024-12-29 11:03:35.138070",
  "name": "Drop Menu",
  "private": 0,
  "roles": [],
  "script": "\n   function openDocType(doctype) {\n      // Check if ERPNext's `frappe` object is available\n      if (typeof frappe !== 'undefined') {\n          // Use ERPNext's built-in navigation method to open the DocType in the same desk page\n          frappe.set_route('List', doctype);\n      } else {\n          console.log(\"ERPNext frappe object not found. Ensure this script is running within ERPNext.\");\n      }\n   }\n\n",
  "style": "/* CSS */\nbody {\n   background-color: #f4f7fa;\n   font-family: \"Open Sans\", sans-serif;\n}\n\nnav {\n   width: 220px;\n   background-color: #ffffff;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n   border-radius: 8px;\n   margin: 40px auto;\n   overflow: hidden;\n   text-align: center; /* Ensure items align left */\n   border-top-left-radius: 80px;\n   border-top-right-radius: 80px;\n}\n\nlabel {\n   display: block;\n   width: 100%;\n   margin: 0;\n   text-align: center; /* Align label text to the left */\n}\n\nspan {\n   padding: 15px;\n   background-image: linear-gradient(to right, var(--main-color), var(--second-color));\n   color: white;\n   font-size: 1em;\n   font-variant: small-caps;\n   cursor: pointer;\n   display: block;\n   text-align: center; /* Align text to the left */\n   transition: background-color 0.3s ease, background-image 0.3s ease;\n   width: 100%;\n   box-sizing: border-box;\n   \n   border-top-left-radius: 80px;\n   border-top-right-radius: 80px;\n}\n\n\nspan:hover {\n   background-image: linear-gradient(to right, var(--second-color), var(--main-color));\n}\n\n\nspan::after {\n   float: right;\n   content: \"+\";\n   font-size: 1.2em;\n   font-weight: bold;\n}\n\n.slide {\n   clear: both;\n   width: 100%;\n   max-height: 0;\n   overflow: hidden;\n   transition: max-height 0.4s ease;\n   text-align: left;\n}\n\n.slide li {\n   list-style: none;\n   padding: 10px 20px;\n   border-bottom: 1px solid #F6FCDF;\n   transition: background-color 0.3s ease, transform 0.3s ease;\n   border-radius: 4px;\n   margin: 5px -50px;\n   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n   text-align: left; /* Ensure list items align left */\n}\n\n.slide li:hover {\n   background-color: var(--widget-bg);\n   transform: translateX(5px);\n}\n\nli a {\n   text-decoration: none;\n   color: #333;\n   display: block;\n   font-size: 0.9em;\n   font-weight: 500;\n   transition: color 0.3s ease;\n   text-align: left; /* Align link text to the left */\n}\n\nli a:hover {\n   color: #31511E;\n}\n\n#touch {\n   position: absolute;\n   opacity: 0;\n   height: 0;\n}\n\n#touch:checked + .slide {\n   max-height: 1000px;\n}\n\n.slide li:last-child {\n   border-bottom: none;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"kanban-view-container\" style=\"height: 500px; overflow: auto;\">\n  <!-- Kanban view will be rendered here -->\n</div>",
  "modified": "2024-11-26 16:43:55.388656",
  "name": "Embed",
  "private": 0,
  "roles": [],
  "script": "frappe.ready(() => {\n    const doctype = \"CRM Lead\"; // Replace with the actual Doctype\n    const kanban_name = \"Kanban\"; // Replace with the actual Kanban view name\n    \n    frappe.call({\n      method: \"frappe.desk.kanban.get_kanban_board\",\n      args: { kanban_board: kanban_name },\n      callback: function (r) {\n        if (r.message) {\n          const kanban_config = r.message;\n          renderKanbanView(kanban_config, doctype);\n        } else {\n          console.error(\"Failed to load Kanban board\");\n        }\n      },\n    });\n\n    function renderKanbanView(kanban_config, doctype) {\n      frappe.views.KanbanBoard({\n        doctype: doctype,\n        kanban_board: kanban_config,\n        container: $(\"#kanban-view-container\"),\n      });\n    }\n  });",
  "style": "\n  #kanban-view-container {\n    border: 1px solid #ddd;\n    background-color: #f9f9f9;\n  }\n\n  .kanban-card {\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  }\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"container\">\n  <div class=\"folder\">\n    <div class=\"front-side\">\n      <div class=\"tip\"></div>\n      <div class=\"cover\"></div>\n    </div>\n    <div class=\"back-side cover\"></div>\n  </div>\n  <label class=\"custom-file-upload\">\n    <input class=\"title\" type=\"file\" />\n    Choose a file\n  </label>\n</div>\n",
  "modified": "2024-12-05 16:18:18.375221",
  "name": "Choose File",
  "private": 0,
  "roles": [],
  "script": null,
  "style": "/* From Uiverse.io by 3bdel3ziz-T */ \n.container {\n  --transition: 350ms;\n  --folder-W: 120px;\n  --folder-H: 80px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 10px;\n  background: linear-gradient(135deg, #6dd5ed, #2193b0);\n  border-radius: 15px;\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);\n  height: calc(var(--folder-H) * 1.7);\n  position: relative;\n}\n\n.folder {\n  position: absolute;\n  top: -20px;\n  left: calc(50% - 60px);\n  animation: float 2.5s infinite ease-in-out;\n  transition: transform var(--transition) ease;\n}\n\n.folder:hover {\n  transform: scale(1.05);\n}\n\n.folder .front-side,\n.folder .back-side {\n  position: absolute;\n  transition: transform var(--transition);\n  transform-origin: bottom center;\n}\n\n.folder .back-side::before,\n.folder .back-side::after {\n  content: \"\";\n  display: block;\n  background-color: white;\n  opacity: 0.5;\n  z-index: 0;\n  width: var(--folder-W);\n  height: var(--folder-H);\n  position: absolute;\n  transform-origin: bottom center;\n  border-radius: 15px;\n  transition: transform 350ms;\n  z-index: 0;\n}\n\n.container:hover .back-side::before {\n  transform: rotateX(-5deg) skewX(5deg);\n}\n.container:hover .back-side::after {\n  transform: rotateX(-15deg) skewX(12deg);\n}\n\n.folder .front-side {\n  z-index: 1;\n}\n\n.container:hover .front-side {\n  transform: rotateX(-40deg) skewX(15deg);\n}\n\n.folder .tip {\n  background: linear-gradient(135deg, #ff9a56, #ff6f56);\n  width: 80px;\n  height: 20px;\n  border-radius: 12px 12px 0 0;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n  position: absolute;\n  top: -10px;\n  z-index: 2;\n}\n\n.folder .cover {\n  background: linear-gradient(135deg, #ffe563, #ffc663);\n  width: var(--folder-W);\n  height: var(--folder-H);\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n}\n\n.custom-file-upload {\n  font-size: 1.1em;\n  color: #ffffff;\n  text-align: center;\n  background: rgba(255, 255, 255, 0.2);\n  border: none;\n  border-radius: 10px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: background var(--transition) ease;\n  display: inline-block;\n  width: 100%;\n  padding: 10px 35px;\n  position: relative;\n}\n\n.custom-file-upload:hover {\n  background: rgba(255, 255, 255, 0.4);\n}\n\n.custom-file-upload input[type=\"file\"] {\n  display: none;\n}\n\n@keyframes float {\n  0% {\n    transform: translateY(0px);\n  }\n\n  50% {\n    transform: translateY(-20px);\n  }\n\n  100% {\n    transform: translateY(0px);\n  }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<select id=\"language-switcher\" onchange=\"changeLanguage(this.value)\">\n    <option value=\"en\">English</option>\n    <option value=\"ar\">العربية</option>\n</select>\n",
  "modified": "2025-03-15 19:02:13.405415",
  "name": "Language drop menu",
  "private": 0,
  "roles": [],
  "script": "\n    function changeLanguage(lang) {\n        frappe.call({\n            method: \"frappe.client.set_value\",\n            args: {\n                doctype: \"User\",\n                name: frappe.session.user,\n                fieldname: \"language\",\n                value: lang\n            },\n            callback: function(response) {\n                if (response.message) {\n                    location.reload(); // Reload to apply changes\n                }\n            }\n        });\n    }\n\n",
  "style": "#language-switcher {\n    background-color: #ffffff;\n    border: 2px solid #007bff;\n    border-radius: 8px;\n    padding: 8px 12px;\n    font-size: 14px;\n    color: #333;\n    cursor: pointer;\n    transition: all 0.3s ease-in-out;\n}\n\n/* Hover Effect */\n#language-switcher:hover {\n    border-color: #0056b3;\n    box-shadow: 0px 4px 8px rgba(0, 123, 255, 0.3);\n}\n\n/* Focus Effect */\n#language-switcher:focus {\n    outline: none;\n    border-color: #0056b3;\n    box-shadow: 0px 0px 10px rgba(0, 91, 187, 0.5);\n}\n\n/* Custom Arrow */\n#language-switcher {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    padding-right: 30px;\n    background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"gray\"><path d=\"M7 10l5 5 5-5z\"/></svg>');\n    background-repeat: no-repeat;\n    background-position: right 10px center;\n    background-size: 14px;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    #language-switcher {\n        font-size: 12px;\n        padding: 6px 10px;\n    }\n}"
 }
]