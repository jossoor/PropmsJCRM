[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 1,
  "modified": "2025-01-08 14:04:27.008981",
  "module": "Property Management Solution",
  "name": "On Sale price",
  "script": "frappe.ui.form.on('Property', {\n    after_insert: function(frm) {\n        if (frm.doc.status === \"On Sale\" && frm.doc.price_per_meter) {\n            const total_price = frm.doc.price_per_meter * frm.doc.builtup_area;\n            \n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Property\",\n                    name: frm.doc.name,\n                    fieldname: \"total_price\",\n                    value: total_price\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        frappe.msgprint({\n                            title: __('Success'),\n                            message: __('Total price has been updated to: ') + total_price,\n                            indicator: 'green'\n                        });\n                        frm.reload_doc(); // Reload the form to reflect changes\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 0,
  "modified": "2025-01-03 23:43:46.472089",
  "module": "Property Management Solution",
  "name": "On lease price",
  "script": "frappe.ui.form.on('Property', {\n    after_insert: function(frm) {\n        if (frm.doc.status === \"On Lease\" && frm.doc.price_per_month_day) {\n            const total_price = 40 * frm.doc.price_per_month_day;\n\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Property\",\n                    name: frm.doc.name,\n                    fieldname: \"total_price\",\n                    value: total_price\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        frappe.msgprint({\n                            title: __('Success'),\n                            message: __('Total price has been updated to: ') + total_price,\n                            indicator: 'green'\n                        });\n                        frm.reload_doc(); // Reload the form to reflect changes\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dashboard Chart",
  "enabled": 1,
  "modified": "2024-12-17 17:20:32.423010",
  "module": "Property Management Solution",
  "name": "Set Chart User",
  "script": "frappe.ui.form.on('Dashboard Chart', {\n  onload: function (frm) {\n    if (frm.doc.chart_name === \"Target Chart\") {\n      frm.set_value(\"filters\", JSON.stringify({ user_email: frappe.session.user }));\n    }\n  },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 0,
  "modified": "2024-12-05 13:41:15.006012",
  "module": "Property Management Solution",
  "name": "Rent or Sale?",
  "script": "frappe.ui.form.on('Property', {\n\tstatus: function (frm) {\n        if (frm.doc.status === 'On lease' || frm.doc.status === 'Off Lease in 3 Months') {\n            // Show \"price per month/day\"\n            frm.set_df_property('price_per_month_day', 'hidden', 0);\n            frm.set_df_property('price_per_meter', 'hidden', 1);\n        } else if (frm.doc.status === 'On Sale' || frm.doc.status === 'Sold' || frm.doc.status === 'Managed for customer') {\n            // Show \"price per meter\"\n            frm.set_df_property('price_per_month_day', 'hidden', 1);\n            frm.set_df_property('price_per_meter', 'hidden', 0);\n        } else {\n            // Hide both if no match\n            frm.set_df_property('price_per_month_day', 'hidden', 1);\n            frm.set_df_property('price_per_meter', 'hidden', 1);\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Unit",
  "enabled": 1,
  "modified": "2025-01-04 17:30:48.590926",
  "module": "Property Management Solution",
  "name": "Unit Rent or Sale?",
  "script": "frappe.ui.form.on('Unit', {\n\tstatus: function (frm) {\n        if (frm.doc.status === 'On Lease' || frm.doc.status === 'Off Lease in 3 Months') {\n            // Show \"price per month/day\"\n            frm.set_df_property('price_per_month_day', 'hidden', 0);\n            frm.set_df_property('price_per_meter', 'hidden', 1);\n        } else if (frm.doc.status === 'On Sale' || frm.doc.status === 'Sold' || frm.doc.status === 'Managed for customer') {\n            // Show \"price per meter\"\n            frm.set_df_property('price_per_month_day', 'hidden', 1);\n            frm.set_df_property('price_per_meter', 'hidden', 0);\n        } else {\n            // Hide both if no match\n            frm.set_df_property('price_per_month_day', 'hidden', 1);\n            frm.set_df_property('price_per_meter', 'hidden', 1);\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 0,
  "modified": "2025-01-15 16:07:04.802816",
  "module": "Property Management Solution",
  "name": "Reserve Button",
  "script": "frappe.ui.form.on('Property', {\n    refresh: function(frm) {\n        // Add a custom button for Reservation\n        frm.add_custom_button(__('Reserve'), function() {\n            check_existing_reservation_and_open_dialog(frm);\n        });\n\n        // Add a custom button for Cancel Reservation\n        frm.add_custom_button(__('Cancel Reservation'), function() {\n            cancel_existing_reservation(frm);\n        });\n    }\n});\n\nfunction check_existing_reservation_and_open_dialog(frm) {\n    // Check if a reservation already exists for this property\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Reservation',\n            filters: {\n                property_unit: frm.doc.name,\n                status: 'Reserve'\n            },\n            fields: ['name']\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                frappe.msgprint({\n                    message: __('A reservation already exists for this property.'),\n                    indicator: 'orange',\n                    alert: true\n                });\n            } else {\n                open_reservation_dialog(frm);\n            }\n        }\n    });\n}\n\nfunction open_reservation_dialog(frm) {\n    // Create a dialog for the Reservation Doctype\n    const dialog = new frappe.ui.Dialog({\n        title: __('Make a Reservation'),\n        fields: [\n            {\n                label: 'Property',\n                fieldname: 'property',\n                fieldtype: 'Link',\n                options: 'Property',\n                default: frm.doc.name,\n                read_only: 1\n            },\n            {\n                label: 'Reserved By',\n                fieldname: 'reserved_by',\n                fieldtype: 'Link',\n                options: 'CRM Lead',\n                reqd: 1 // Make this field mandatory\n            },\n            {\n               fieldname: 'price',\n               fieldtype: 'Int',\n               label: 'Price',\n               default: frm.doc.total_price,\n               read_only: 1,\n            },\n            {\n                label: 'Status',\n                fieldname: 'status',\n                fieldtype: 'Select',\n                options: ['Reserve', 'Cancel'],\n                default: 'Reserve',\n                read_only: 1,\n\n                \n            },\n            {\n                label: 'Reservation Date',\n                fieldname: 'reservation_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.now_date()\n            },\n            {\n               fieldname: 'national_id',\n               fieldtype: 'Attach',\n               label: 'National ID',\n               reqd: 1\n            },\n            {\n               fieldname: 'reservation_form',\n               fieldtype: 'Link',\n               label: 'Reservation Form',\n               options: 'Reservation form',\n               link_filters: '[[\\\"Reservation form\\\",\\\"status\\\",\\\"=\\\",\\\"Approved\\\"]]',\n               reqd: 1\n            },\n            {\n               fieldname: 'sales_person',\n               fieldtype: 'Link',\n               label: 'Sales Person',\n               options: 'User'\n            }\n        ],\n        primary_action_label: __('Submit'),\n        primary_action: function(values) {\n            // Call a server-side method to create the Reservation and update Property\n            frappe.call({\n                method: 'frappe.client.insert',\n                args: {\n                    doc: {\n                        doctype: 'Reservation',\n                        property_unit: values.property,\n                        reserved_by: values.reserved_by,\n                        status: values.status,\n                        reservation_date: values.reservation_date,\n                        price: values.price,\n                        sales_person: values.sales_person,\n                        national_id: values.national_id,\n                        reservation_form: values.reservation_form,\n                    }\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        frappe.msgprint({\n                            message: __('Reservation created successfully.'),\n                            indicator: 'green',\n                            alert: true\n                        });\n                        // Update the Property status to \"Booked\"\n                        frm.set_value('for_cancellation', frm.doc.status)\n                        frm.set_value('status', 'Reserved');\n                        frm.save();\n                    }\n                }\n            });\n            dialog.hide();\n        }\n    });\n\n    dialog.show();\n}\n\nfunction cancel_existing_reservation(frm) {\n    // Check if a reservation exists for the property\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Reservation',\n            filters: {\n                property_unit: frm.doc.name,\n                status: 'Reserve'\n            },\n            fields: ['name']\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                const reservation_name = response.message[0].name;\n                // Update the reservation status to \"Cancel\"\n                frappe.call({\n                    method: 'frappe.client.set_value',\n                    args: {\n                        doctype: 'Reservation',\n                        name: reservation_name,\n                        fieldname: 'status',\n                        value: 'Cancel'\n                    },\n                    callback: function() {\n                        frappe.msgprint({\n                            message: __('Reservation canceled successfully.'),\n                            indicator: 'green',\n                            alert: true\n                        });\n                        // Update the Property status to \"Available\"\n                        frm.set_value('status', frm.doc.for_cancellation);\n                        frm.save();\n                    }\n                });\n            } else {\n                frappe.msgprint({\n                    message: __('No active reservation exists for this property.'),\n                    indicator: 'orange',\n                    alert: true\n                });\n            }\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 1,
  "modified": "2024-12-05 13:41:29.472273",
  "module": "Property Management Solution",
  "name": "Maps",
  "script": "frappe.ui.form.on('Property', {\n\trefresh(frm) {\n\t\tfrm.fields_dict.location.map.setView([frm.doc.latitude, frm.doc.longitude], 13);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 0,
  "modified": "2024-12-25 16:44:21.022078",
  "module": "Property Management Solution",
  "name": "Facilities",
  "script": "frappe.ui.form.on('Property', {\n    facilities: function(frm) {\n        // Get the selected values from the \"facilities\" field\n        let selected_facilities = frm.doc.facilities || [];\n\n        // Define the condition for showing the specific field\n        let should_show = selected_facilities.some(facility => facility.value === 'Garage'); \n\n        // Update the visibility of the target field\n        frm.set_df_property('Garage Price', 'hidden', 0);\n    }\n});\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 0,
  "modified": "2024-12-30 13:59:48.072967",
  "module": "Property Management Solution",
  "name": "For Canellation of property",
  "script": "frappe.ui.form.on('Property', {\n    status: function(frm) {\n        // Check if 'for_cancellation' is empty and 'status' is set\n        if (frm.doc.for_cancellation == \"Available\" && frm.doc.status) {\n            frm.set_value('for_cancellation', frm.doc.status);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Property",
  "enabled": 1,
  "modified": "2025-01-09 02:54:32.538077",
  "module": "Property Management Solution",
  "name": "Calculate Total Price",
  "script": "frappe.ui.form.on('Property', {\n    refresh: function(frm) {\n        console.log(\"Form refreshed\");\n        calculate_total_price(frm); // Call the main calculation function\n    },\n    table_zcpl_add: function(frm, cdt, cdn) {\n        console.log(\"Row added\");\n        calculate_total_price(frm);\n    },\n    table_zcpl_remove: function(frm, cdt, cdn) {\n        console.log(\"Row removed\");\n        calculate_total_price(frm);\n    },\n    builtup_area: function(frm) { // Add triggers for area and price per meter\n        calculate_total_price(frm);\n    },\n    price_per_meter: function(frm) {\n        calculate_total_price(frm);\n    },\n    unit_price: function(frm) {\n        calculate_total_price(frm);\n    }\n});\n\nfrappe.ui.form.on('Project Facility', {\n    facility: function(frm, cdt, cdn) {\n        console.log(\"Facility changed\");\n        calculate_total_price(frm);\n    },\n    facility_price: function(frm, cdt, cdn) {\n        console.log(\"Price changed\");\n        calculate_total_price(frm);\n    }\n});\n\nfunction calculate_total_price(frm) {\n    let total_facilities_price = 0;\n    let base_price = 0;\n    let total_price = 0;\n\n    console.log(\"Calculating total...\");\n\n    // Calculate total facilities price (same as before)\n    if (frm.doc.table_zcpl && frm.doc.table_zcpl.length) {\n        frm.doc.table_zcpl.forEach(function(row) {\n            total_facilities_price += flt(row.facility_price) || 0;\n        });\n    }\n\n    console.log(\"Total Facilities Price:\", total_facilities_price);\n    frm.set_value('total_facilities_price', total_facilities_price);\n    frm.refresh_field('total_facilities_price');\n\n    // Calculate base price (built-up area * price per meter)\n    let built_up_area = flt(frm.doc.builtup_area) || 0;\n    let price_per_meter = flt(frm.doc.price_per_meter) || 0;\n\n    base_price = built_up_area * price_per_meter;\n\n    console.log(\"Built-up Area:\", built_up_area);\n    console.log(\"Price per Meter:\", price_per_meter);\n    console.log(\"Base Price:\", base_price);\n\n    // Calculate final total price\n    total_price = base_price + total_facilities_price;\n\n    console.log(\"Final Total Price:\", total_price);\n    frm.set_value('unit_price',base_price); // Set the value of the new field\n    frm.set_value('total_price', total_price); // Set the value of the new field\n\n    frm.refresh_field('total_price'); // Refresh the new field\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Reservation form",
  "enabled": 1,
<<<<<<< HEAD
  "modified": "2025-01-18 20:27:42.262713",
  "module": "Property Management Solution",
  "name": "Reservation form logic",
  "script": "frappe.ui.form.on('Reservation form', {\n    refresh: function (frm) {\n        // Log debug information\n        \n        console.log(\"Before Submit Triggered\");\n        // Skip if no property name\n        if (!frm.doc.property_name) return;\n        let newStatus;\n        let isProcessing = false;  // Flag to prevent multiple calls\n\n        // Determine the new status based on form status\n        if (frm.doc.status === \"Approved\") {\n            newStatus = \"Reserved\";\n        } else if (frm.doc.status === \"Cancel\" || frm.doc.status === \"Rejected\") {\n            newStatus = \"Available\";\n        } else {\n            return;  // Exit if status doesn't match any conditions\n        }\n\n        // Prevent multiple simultaneous calls\n        if (isProcessing) return;\n\n        isProcessing = true;\n        frappe.call({\n            method: \"propms.property_management_solution.doctype.reservation_form.reservation_form.update_property_status\",\n            args: {\n                property_name: frm.doc.property_name,\n                status: newStatus,\n            },\n            callback: function (response) {\n                isProcessing = false;  // Reset processing flag\n\n                // Log success or error without showing alerts\n                if (response.message === \"success\") {\n                    console.log(`The property has been marked as ${newStatus}.`);\n                    frm._status_updated = true;\n\n                } else if (response.message === \"already_reserved\" || response.message === \"already_available\") {\n                    console.log(`The property is already ${newStatus.toLowerCase()}.`);\n                } else {\n                    console.log(\"An error occurred while updating the property status.\");\n                }\n            },\n            error: function (err) {\n                isProcessing = false;  // Reset processing flag\n                console.log(\"Server error occurred while updating the property status.\");\n            }\n        });\n    }\n});\n\n",
=======
  "modified": "2025-01-15 16:04:45.027093",
  "module": "Property Management Solution",
  "name": "Update Property Status After Reservation form Submit",
  "script": "frappe.ui.form.on('Reservation form', {\n    refresh: function (frm) {\n        // Log debug information\n        \n        console.log(\"Before Submit Triggered\");\n        // Skip if no property name\n        if (!frm.doc.property_name) return;\n        let newStatus;\n        let isProcessing = false;  // Flag to prevent multiple calls\n\n        // Determine the new status based on form status\n        if (frm.doc.status === \"Approved\") {\n            newStatus = \"Reserved\";\n        } else if (frm.doc.status === \"Cancel\" || frm.doc.status === \"Rejected\") {\n            newStatus = \"Available\";\n        } else {\n            return;  // Exit if status doesn't match any conditions\n        }\n\n        // Prevent multiple simultaneous calls\n        if (isProcessing) return;\n\n        isProcessing = true;\n        frappe.call({\n            method: \"propms.property_management_solution.doctype.reservation_form.reservation_form.update_property_status\",\n            args: {\n                property_name: frm.doc.property_name,\n                status: newStatus,\n            },\n            callback: function (response) {\n                isProcessing = false;  // Reset processing flag\n\n                // Log success or error without showing alerts\n                if (response.message === \"success\") {\n                    console.log(`The property has been marked as ${newStatus}.`);\n                    frm._status_updated = true;\n\n                } else if (response.message === \"already_reserved\" || response.message === \"already_available\") {\n                    console.log(`The property is already ${newStatus.toLowerCase()}.`);\n                } else {\n                    console.log(\"An error occurred while updating the property status.\");\n                }\n            },\n            error: function (err) {\n                isProcessing = false;  // Reset processing flag\n                console.log(\"Server error occurred while updating the property status.\");\n            }\n        });\n    }\n});\n",
>>>>>>> 3d8e0cac505629a1ab6c9ac1329df79afbe49923
  "view": "Form"
 }
]